import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import { formatCurrency, formatDate } from './utils';

// Company Information Interface
interface CompanyInfo {
  name: string;
  logo?: string; // Base64 image data
  address: {
    street: string;
    city: string;
    state: string;
    zipCode: string;
    country: string;
  };
  contact: {
    phone: string;
    email: string;
    website?: string;
    fax?: string;
  };
  business: {
    registrationNumber?: string;
    taxId?: string;
    gstNumber?: string;
    industry: string;
    establishedYear?: number;
  };
  banking: {
    bankName?: string;
    accountNumber?: string;
    routingNumber?: string;
    swiftCode?: string;
  };
}

// Report Types
type ReportType = 'inventory' | 'sales' | 'purchase' | 'financial' | 'tax' | 'audit' | 'custom';

// Enhanced PDF Report Generation
export class ComprehensiveReportGenerator {
  private doc: jsPDF;
  private companyInfo: CompanyInfo;
  private currentY: number = 20;
  private pageWidth: number;
  private pageHeight: number;
  private margins = { left: 20, right: 20, top: 20, bottom: 30 };

  constructor(companyInfo: CompanyInfo) {
    this.doc = new jsPDF();
    this.companyInfo = companyInfo;
    this.pageWidth = this.doc.internal.pageSize.width;
    this.pageHeight = this.doc.internal.pageSize.height;
  }

  // Add Company Header with Logo and Complete Info
  private addCompanyHeader(reportTitle: string, reportSubtitle?: string) {
    // Add company logo if available
    if (this.companyInfo.logo) {
      try {
        this.doc.addImage(this.companyInfo.logo, 'PNG', 20, 15, 30, 30);
      } catch (error) {
        console.error('Error adding logo:', error);
      }
    }

    // Company Name and Title
    this.doc.setFontSize(24);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(this.companyInfo.name, this.companyInfo.logo ? 60 : 20, 25);
    
    this.doc.setFontSize(18);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(reportTitle, this.companyInfo.logo ? 60 : 20, 35);
    
    if (reportSubtitle) {
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'normal');
      this.doc.text(reportSubtitle, this.companyInfo.logo ? 60 : 20, 42);
    }

    // Company Address and Contact (Right Side)
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    const rightX = this.pageWidth - 80;
    
    this.doc.text('Address:', rightX, 25);
    this.doc.text(this.companyInfo.address.street, rightX, 32);
    this.doc.text(`${this.companyInfo.address.city}, ${this.companyInfo.address.state} ${this.companyInfo.address.zipCode}`, rightX, 39);
    this.doc.text(this.companyInfo.address.country, rightX, 46);
    
    this.doc.text(`Phone: ${this.companyInfo.contact.phone}`, rightX, 56);
    this.doc.text(`Email: ${this.companyInfo.contact.email}`, rightX, 63);
    
    if (this.companyInfo.contact.website) {
      this.doc.text(`Website: ${this.companyInfo.contact.website}`, rightX, 70);
    }

    // Business Information
    if (this.companyInfo.business.registrationNumber) {
      this.doc.text(`Reg. No: ${this.companyInfo.business.registrationNumber}`, rightX, 80);
    }
    if (this.companyInfo.business.taxId) {
      this.doc.text(`Tax ID: ${this.companyInfo.business.taxId}`, rightX, 87);
    }
    if (this.companyInfo.business.gstNumber) {
      this.doc.text(`GST: ${this.companyInfo.business.gstNumber}`, rightX, 94);
    }

    // Horizontal line under header
    this.doc.setLineWidth(0.5);
    this.doc.line(20, 105, this.pageWidth - 20, 105);
    
    this.currentY = 120;
  }

  // Add Report Metadata
  private addReportMetadata(reportData: any) {
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Report Information', 20, this.currentY);
    
    this.doc.setFont('helvetica', 'normal');
    this.doc.setFontSize(10);
    
    const metadata = [
      [`Report Generated:`, formatDate(new Date())],
      [`Report Period:`, reportData.period || 'All Time'],
      [`Generated By:`, reportData.generatedBy || 'System'],
      [`Report Type:`, reportData.type || 'Comprehensive'],
      [`Total Records:`, reportData.totalRecords?.toString() || '0'],
      [`Data Source:`, 'Inventory Management System']
    ];

    let yPos = this.currentY + 10;
    metadata.forEach(([label, value]) => {
      this.doc.setFont('helvetica', 'bold');
      this.doc.text(label, 25, yPos);
      this.doc.setFont('helvetica', 'normal');
      this.doc.text(value, 80, yPos);
      yPos += 7;
    });

    this.currentY = yPos + 10;
  }

  // Add Executive Summary
  private addExecutiveSummary(summaryData: any) {
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Executive Summary', 20, this.currentY);
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    
    const summary = [
      [`Total Products:`, summaryData.totalProducts?.toString() || '0'],
      [`Total Categories:`, summaryData.totalCategories?.toString() || '0'],
      [`Total Inventory Value:`, formatCurrency(summaryData.totalInventoryValue || 0)],
      [`Low Stock Items:`, summaryData.lowStockItems?.toString() || '0'],
      [`Total Sales:`, formatCurrency(summaryData.totalSales || 0)],
      [`Active Customers:`, summaryData.activeCustomers?.toString() || '0'],
      [`Pending Orders:`, summaryData.pendingOrders?.toString() || '0'],
      [`Last Updated:`, formatDate(summaryData.lastUpdated || new Date())]
    ];

    let yPos = this.currentY + 15;
    summary.forEach(([label, value]) => {
      this.doc.setFont('helvetica', 'bold');
      this.doc.text(label, 25, yPos);
      this.doc.setFont('helvetica', 'normal');
      this.doc.text(value, 100, yPos);
      yPos += 7;
    });

    this.currentY = yPos + 15;
  }

  // Generate Comprehensive Inventory Report
  public generateInventoryReport(data: {
    products: any[];
    categories: any[];
    suppliers?: any[];
    movements?: any[];
    summary: any;
    period?: string;
    generatedBy?: string;
  }) {
    // Add header
    this.addCompanyHeader('Comprehensive Inventory Report', `Period: ${data.period || 'All Time'}`);
    
    // Add metadata
    this.addReportMetadata({
      period: data.period,
      generatedBy: data.generatedBy,
      type: 'Inventory Analysis',
      totalRecords: data.products.length
    });

    // Add executive summary
    this.addExecutiveSummary(data.summary);

    // Products Table
    this.addSectionTitle('Product Inventory Details');
    const productTableData = data.products.map(product => [
      product.name || '',
      product.sku || '',
      product.category?.name || 'Uncategorized',
      product.stockQuantity?.toString() || '0',
      formatCurrency(product.price || 0),
      formatCurrency(product.costPrice || 0),
      formatCurrency((product.price || 0) * (product.stockQuantity || 0)),
      product.lowStockThreshold?.toString() || '0',
      product.supplier || 'Not specified',
      formatDate(product.updatedAt || new Date())
    ]);

    autoTable(this.doc, {
      head: [['Product Name', 'SKU', 'Category', 'Stock', 'Unit Price', 'Cost Price', 'Total Value', 'Min Stock', 'Supplier', 'Last Updated']],
      body: productTableData,
      startY: this.currentY,
      styles: { fontSize: 8 },
      headStyles: { fillColor: [66, 139, 202], textColor: 255 },
      alternateRowStyles: { fillColor: [245, 245, 245] },
      columnStyles: {
        3: { halign: 'right' },
        4: { halign: 'right' },
        5: { halign: 'right' },
        6: { halign: 'right' },
        7: { halign: 'right' }
      }
    });

    this.currentY = (this.doc as any).lastAutoTable.finalY + 20;

    // Category Analysis
    this.addSectionTitle('Category Analysis');
    const categoryTableData = data.categories.map(category => {
      const categoryProducts = data.products.filter(p => p.categoryId === category.id);
      const totalValue = categoryProducts.reduce((sum, p) => sum + ((p.price || 0) * (p.stockQuantity || 0)), 0);
      const totalStock = categoryProducts.reduce((sum, p) => sum + (p.stockQuantity || 0), 0);
      
      return [
        category.name || '',
        category.description || 'No description',
        categoryProducts.length.toString(),
        totalStock.toString(),
        formatCurrency(totalValue),
        formatDate(category.updatedAt || new Date())
      ];
    });

    autoTable(this.doc, {
      head: [['Category', 'Description', 'Products', 'Total Stock', 'Total Value', 'Last Updated']],
      body: categoryTableData,
      startY: this.currentY,
      styles: { fontSize: 9 },
      headStyles: { fillColor: [52, 152, 219], textColor: 255 }
    });

    this.currentY = (this.doc as any).lastAutoTable.finalY + 20;

    // Low Stock Alert
    const lowStockProducts = data.products.filter(p => 
      (p.stockQuantity || 0) <= (p.lowStockThreshold || 0)
    );

    if (lowStockProducts.length > 0) {
      this.addSectionTitle('Low Stock Alert', 'red');
      const lowStockTableData = lowStockProducts.map(product => [
        product.name || '',
        product.sku || '',
        (product.stockQuantity || 0).toString(),
        (product.lowStockThreshold || 0).toString(),
        ((product.lowStockThreshold || 0) - (product.stockQuantity || 0)).toString(),
        'REORDER REQUIRED'
      ]);

      autoTable(this.doc, {
        head: [['Product', 'SKU', 'Current Stock', 'Min Required', 'Shortage', 'Action']],
        body: lowStockTableData,
        startY: this.currentY,
        styles: { fontSize: 9 },
        headStyles: { fillColor: [231, 76, 60], textColor: 255 },
        bodyStyles: { textColor: [150, 0, 0] }
      });

      this.currentY = (this.doc as any).lastAutoTable.finalY + 20;
    }

    // Add footer
    this.addReportFooter();

    return this.doc;
  }

  // Generate Sales Report
  public generateSalesReport(data: {
    invoices: any[];
    customers: any[];
    summary: any;
    period?: string;
    generatedBy?: string;
  }) {
    this.addCompanyHeader('Comprehensive Sales Report', `Period: ${data.period || 'All Time'}`);
    
    this.addReportMetadata({
      period: data.period,
      generatedBy: data.generatedBy,
      type: 'Sales Analysis',
      totalRecords: data.invoices.length
    });

    this.addExecutiveSummary(data.summary);

    // Sales Table
    this.addSectionTitle('Sales Transactions');
    const salesTableData = data.invoices.map(invoice => [
      invoice.invoiceNumber || '',
      formatDate(invoice.createdAt),
      invoice.customerName || '',
      invoice.invoiceItems?.length.toString() || '0',
      formatCurrency(invoice.subtotal || 0),
      formatCurrency(invoice.taxAmount || 0),
      formatCurrency(invoice.discountAmount || 0),
      formatCurrency(invoice.totalAmount || 0),
      invoice.paymentStatus || 'Unknown',
      formatCurrency(invoice.paidAmount || 0),
      formatCurrency(invoice.balanceAmount || 0)
    ]);

    autoTable(this.doc, {
      head: [['Invoice#', 'Date', 'Customer', 'Items', 'Subtotal', 'Tax', 'Discount', 'Total', 'Status', 'Paid', 'Balance']],
      body: salesTableData,
      startY: this.currentY,
      styles: { fontSize: 8 },
      headStyles: { fillColor: [46, 204, 113], textColor: 255 },
      columnStyles: {
        4: { halign: 'right' },
        5: { halign: 'right' },
        6: { halign: 'right' },
        7: { halign: 'right' },
        9: { halign: 'right' },
        10: { halign: 'right' }
      }
    });

    this.addReportFooter();
    return this.doc;
  }

  // Add section title
  private addSectionTitle(title: string, color: string = 'black') {
    if (this.currentY > this.pageHeight - 50) {
      this.doc.addPage();
      this.currentY = 30;
    }

    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    
    if (color === 'red') {
      this.doc.setTextColor(231, 76, 60);
    } else {
      this.doc.setTextColor(0, 0, 0);
    }
    
    this.doc.text(title, 20, this.currentY);
    this.doc.setTextColor(0, 0, 0); // Reset color
    
    this.currentY += 10;
  }

  // Add comprehensive footer
  private addReportFooter() {
    const pageCount = this.doc.getNumberOfPages();
    
    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i);
      
      // Footer line
      this.doc.setLineWidth(0.3);
      this.doc.line(20, this.pageHeight - 25, this.pageWidth - 20, this.pageHeight - 25);
      
      // Footer content
      this.doc.setFontSize(8);
      this.doc.setFont('helvetica', 'normal');
      
      // Left side - company info
      this.doc.text(`${this.companyInfo.name} | ${this.companyInfo.contact.email}`, 20, this.pageHeight - 15);
      this.doc.text(`Generated on ${formatDate(new Date())} | Confidential Document`, 20, this.pageHeight - 8);
      
      // Right side - page numbers
      this.doc.text(`Page ${i} of ${pageCount}`, this.pageWidth - 40, this.pageHeight - 15);
      
      // Disclaimer
      this.doc.text('This is a computer-generated report and does not require signature.', this.pageWidth - 120, this.pageHeight - 8);
    }
  }

  // Save PDF
  public savePDF(filename: string) {
    this.doc.save(filename);
  }

  // Get PDF as blob
  public getPDFBlob(): Blob {
    return this.doc.output('blob');
  }
}

// Enhanced Excel Report Generation
export class ExcelReportGenerator {
  private workbook: XLSX.WorkBook;
  private companyInfo: CompanyInfo;

  constructor(companyInfo: CompanyInfo) {
    this.workbook = XLSX.utils.book_new();
    this.companyInfo = companyInfo;
  }

  public generateInventoryExcel(data: {
    products: any[];
    categories: any[];
    summary: any;
  }) {
    // Company Info Sheet
    const companyData = [
      ['Company Information'],
      ['Name', this.companyInfo.name],
      ['Address', `${this.companyInfo.address.street}, ${this.companyInfo.address.city}`],
      ['Phone', this.companyInfo.contact.phone],
      ['Email', this.companyInfo.contact.email],
      ['Generated', formatDate(new Date())],
      [],
      ['Summary'],
      ['Total Products', data.summary.totalProducts || 0],
      ['Total Categories', data.summary.totalCategories || 0],
      ['Total Value', data.summary.totalInventoryValue || 0],
      ['Low Stock Items', data.summary.lowStockItems || 0]
    ];

    const companySheet = XLSX.utils.aoa_to_sheet(companyData);
    XLSX.utils.book_append_sheet(this.workbook, companySheet, 'Company Info');

    // Products Sheet
    const productHeaders = [
      'Product Name', 'SKU', 'Category', 'Stock Quantity', 
      'Unit Price', 'Cost Price', 'Total Value', 'Low Stock Threshold',
      'Supplier', 'Created Date', 'Updated Date'
    ];

    const productData = data.products.map(product => [
      product.name || '',
      product.sku || '',
      product.category?.name || 'Uncategorized',
      product.stockQuantity || 0,
      product.price || 0,
      product.costPrice || 0,
      (product.price || 0) * (product.stockQuantity || 0),
      product.lowStockThreshold || 0,
      product.supplier || '',
      formatDate(product.createdAt),
      formatDate(product.updatedAt)
    ]);

    const productsSheet = XLSX.utils.aoa_to_sheet([productHeaders, ...productData]);
    XLSX.utils.book_append_sheet(this.workbook, productsSheet, 'Products');

    // Categories Sheet
    const categoryHeaders = ['Category Name', 'Description', 'Color', 'Product Count', 'Total Value', 'Created Date'];
    const categoryData = data.categories.map(category => {
      const categoryProducts = data.products.filter(p => p.categoryId === category.id);
      const totalValue = categoryProducts.reduce((sum, p) => sum + ((p.price || 0) * (p.stockQuantity || 0)), 0);
      
      return [
        category.name || '',
        category.description || '',
        category.color || '',
        categoryProducts.length,
        totalValue,
        formatDate(category.createdAt)
      ];
    });

    const categoriesSheet = XLSX.utils.aoa_to_sheet([categoryHeaders, ...categoryData]);
    XLSX.utils.book_append_sheet(this.workbook, categoriesSheet, 'Categories');

    return this.workbook;
  }

  public saveExcel(filename: string) {
    XLSX.writeFile(this.workbook, filename);
  }
}

// Default company information (loads from localStorage if available)
export const getDefaultCompanyInfo = (): CompanyInfo => {
  // Try to load from localStorage first
  try {
    const savedSettings = localStorage.getItem('companySettings');
    if (savedSettings) {
      const settings = JSON.parse(savedSettings);
      return {
        name: settings.name || 'Your Company Name',
        logo: settings.logo,
        address: {
          street: settings.address?.street || '123 Business Street',
          city: settings.address?.city || 'Business City',
          state: settings.address?.state || 'State',
          zipCode: settings.address?.zipCode || '12345',
          country: settings.address?.country || 'Country',
        },
        contact: {
          phone: settings.contact?.phone || '+1-234-567-8900',
          email: settings.contact?.email || 'info@yourcompany.com',
          website: settings.contact?.website || 'www.yourcompany.com',
          fax: settings.contact?.fax,
        },
        business: {
          registrationNumber: settings.business?.registrationNumber,
          taxId: settings.business?.taxId,
          gstNumber: settings.business?.gstNumber,
          industry: settings.business?.industry || 'Retail/Wholesale',
          establishedYear: settings.business?.establishedYear || new Date().getFullYear(),
        },
        banking: {
          bankName: settings.banking?.bankName,
          accountNumber: settings.banking?.accountNumber,
          routingNumber: settings.banking?.routingNumber,
          swiftCode: settings.banking?.swiftCode,
        },
      };
    }
  } catch (error) {
    console.error('Error loading company settings:', error);
  }

  // Fallback to default values
  return {
    name: 'Your Company Name',
    address: {
      street: '123 Business Street',
      city: 'Business City',
      state: 'State',
      zipCode: '12345',
      country: 'Country'
    },
    contact: {
      phone: '+1-234-567-8900',
      email: 'info@yourcompany.com',
      website: 'www.yourcompany.com'
    },
    business: {
      industry: 'Retail/Wholesale',
      establishedYear: new Date().getFullYear()
    },
    banking: {}
  };
};

// Export functions for easy use
export const generateComprehensiveInventoryReport = (
  data: {
    products: any[];
    categories: any[];
    suppliers?: any[];
    movements?: any[];
    summary: any;
    period?: string;
    generatedBy?: string;
  }, 
  companyInfo: CompanyInfo = getDefaultCompanyInfo()
) => {
  const generator = new ComprehensiveReportGenerator(companyInfo);
  return generator.generateInventoryReport(data);
};

export const generateComprehensiveSalesReport = (
  data: {
    invoices: any[];
    customers: any[];
    summary: any;
    period?: string;
    generatedBy?: string;
  }, 
  companyInfo: CompanyInfo = getDefaultCompanyInfo()
) => {
  const generator = new ComprehensiveReportGenerator(companyInfo);
  return generator.generateSalesReport(data);
};
