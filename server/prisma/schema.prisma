generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categories    Category[]
  products      Product[]
  customers     Customer[]
  invoices      Invoice[]
  stockMovements StockMovement[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String
  color       String   @default("#3B82F6")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([name, userId])
  @@map("categories")
}

model Product {
  id                String   @id @default(cuid())
  name              String
  description       String
  sku               String   @unique
  categoryId        String
  price             Float
  costPrice         Float
  stockQuantity     Int
  lowStockThreshold Int      @default(10)
  supplier          String
  isActive          Boolean  @default(true)
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  invoiceItems   InvoiceItem[]
  stockMovements StockMovement[]

  @@map("products")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  notes     String?
  panNumber String?
  vatNumber String?
  isActive  Boolean  @default(true)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  @@map("customers")
}

model Invoice {
  id          String   @id @default(cuid())
  invoiceNo   String   @unique
  customerId  String
  totalAmount Float
  taxAmount   Float    @default(0)
  discount    Float    @default(0)
  status      String   @default("PENDING") // PENDING, PAID, CANCELLED, OVERDUE
  dueDate     DateTime?
  notes       String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items    InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  productId String
  quantity  Int
  unitPrice Float
  discount  Float   @default(0)
  total     Float

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model StockMovement {
  id         String   @id @default(cuid())
  productId  String
  type       String   // IN, OUT, ADJUSTMENT
  quantity   Int
  reason     String?
  reference  String?
  userId     String
  createdAt  DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("stock_movements")
}
